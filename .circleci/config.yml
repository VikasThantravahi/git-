
version: 2.1
commands:
  test:
    parameters:
      command:
        type: string
    steps:
      - run:
        name: command test
        command: |
          ls
          pwd
        
jobs:
  test:
    steps:
      - test:
        command: ll
  say-hello:
    environment:
      PIPELINE_NUMBER: << pipeline.number >>
      #Build_number: << .BuildNum >>
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current
    shell: /bin/bash --login
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: print env
          command: |
            echo $PIPELINE_NUMBER
            echo "Hello, world" >  build$PIPELINE_NUMBER
            echo "Hi" > Hi.txt
            ls -lart
            echo $CIRCLE_BUILD_NUM
            echo "pipeline number is $PIPELINE_NUMBER"
            
            
      - save_cache:
          paths:
            - Hi.txt
          key: v1-my-cache--{{ checksum "Hi.txt" }}
      
      # Save cache for future builds
      - save_cache:
          key: my-key
          paths:
            - /home/circleci/project/yarn_install
          pre-steps:
            - run:
                command: |
                  if [ -f "test.txt" ]; then
                    echo "doing pre-verify"
                  fi
         
  say-bye: 
     environment:
       PIPELINE_NUMBER: << pipeline.number >>  
       #Build_number: << .BuildNum >>
       
     docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
       - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
     steps:
      # Checkout the code as the first step.
       - checkout
       - restore_cache:
           key: v1-my-cache--{{ checksum "Hi.txt" }}
       - run:
           name: "Say hello"
           command: |
              echo "Hello, World!"
              ls -lart
              echo $CIRCLE_BUILD_NUM
              echo "pipeline number is $PIPELINE_NUMBER"
       - run:
           name: "Test restore"
           command: |
             ls -la
             pwd

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    when:
      or:
        - equal: [circleci-project-setup, << pipeline.git.branch >>]
    jobs:
      - say-hello
      - say-bye:
          requires:
            - say-hello
 
