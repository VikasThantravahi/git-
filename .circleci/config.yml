# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current
    shell: /bin/bash --login
    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
      - run:
          name: Install dependencies
          command: |
            if [ -f "Jenkinsfile" ]; then
              echo "Cache restored, skipping yarn install."
              init 0
            else
              echo "Cache not found, running yarn install."
              touch yarn_install
              echo "export CACHE_NOT_RESTORED=true" >> $BASH_ENV
              echo "test" > test.txt
              ls -la
              pwd
            fi

      # Save cache for future builds
      - save_cache:
          key: my-key
         # condition: "if [ -f 'test.txt' ]; then exit 0; fi"
          when: on_success
          paths:
            - /home/circleci/project/yarn_install
      - run:
          name: "Hi Anudeep"
          command: "echo Hello, World!"
  say-bye: 
     docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
       - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
     steps:
      # Checkout the code as the first step.
       - checkout
       - run:
           name: "Say hello"
           command: "echo Hello, World!"
       #- restore_cache:
        #   key: my-key
       - run:
           name: "Test restore"
           command: |
             ls -la
             pwd

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello
        #  requires: 
      - say-bye
